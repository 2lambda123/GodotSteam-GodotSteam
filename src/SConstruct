#!python
import os
import sys
# To compile your game code you need to run:
# `scons p=linux` to compile for linux
# `scons p=windows` to compile for windows
# on linux you can optionally use `use_llvm=yes` to use clang instead of gcc
# Mac/Android will come soon as well. (help is appreciated :D)
#################################################
# Project name can be changed
# Using GodotSteam
project_name = "godotsteam"
# Set up the environment
env = Environment()
# Create an OS_BIT variable for use
OS_BIT = None

# If bit is not specified, use this fallback which isn't great
if ARGUMENTS.get("bits", ARGUMENTS.get("b", False)):
	print("Bits used!")
	OS_BIT = ARGUMENTS.get("bits", ARGUMENTS.get("b", False))
else:
	if (sys.maxsize > 2**32):
		OS_BIT = "64"
	else:
		OS_BIT = "32"
	print("Bits not used! Consider using the bits or b argument. System reported as %s-bit") % (OS_BIT)

# Using clang instead of ggc
if ARGUMENTS.get("use_llvm", "no") == "yes":
	env["CXX"] = "clang++"

# Get the platform specified
platform = ARGUMENTS.get("platform", ARGUMENTS.get("p", False))

# Add_sources adds all files that have a .cpp extension from the path that is the second parameter
# For example: to add all .cpp files in the folder "tower" you"d write: add_sources(sources, "tower")
# The same works for nested folders: add_sources(sources, "stages/game")
def add_sources(sources, dir):
	for f in os.listdir(dir):
		if f.endswith(".cpp"):
			sources.append(dir + "/" + f)

# Append the base include and lib path
env.Append(CPPPATH=["../include"])
env.Append(LIBPATH=["../lib"])

# Append the Steam API path
env.Append(CPPPATH=["../include/sdk/public/"])

# Check for platform and append the right files
# If the platform is Linux
if platform == "linux":
	env.Append(CCFLAGS = ["-g","-O3", "-std=c++14"])
	env.Append(LINKFLAGS = ["-Wl,-R,\"$$ORIGIN\""])
	# Check bits
	if OS_BIT == "32":
		env.Append(RPATH=env.Literal("\\$$ORIGIN"))
		env.Append(LIBPATH=["../include/sdk/redistributable_bin/linux32"])
	elif OS_BIT == "64":
		env.Append(RPATH=env.Literal("\\$$ORIGIN"))
		env.Append(LIBPATH=["../include/sdk/redistributable_bin/linux64"])
# If the platform is OSX
if platform == "osx":
	env.Append(RPATH=env.Literal("\\$$ORIGIN"))
	env.Append(LIBPATH=["../include/sdk/redistributable_bin/osx32"])
# If the platform is Windows
if platform == "windows":
	steamlib = "steam_api"
	steamlib_path = "../include/sdk/redistributable_bin"
	# Using 64bit steam_api?
	# Change this to false if you have problems with "unresolved external symbols"
	use_64bit_lib = True
	# Mostly VisualStudio
	if env["CC"] == "cl":
		if OS_BIT == "32":
			steamlib += ".lib"
		elif OS_BIT == "64":
			if (use_64bit_lib):
				steamlib += "64"
				steamlib_path += "/win64"
			steamlib += ".lib"
		env.Append(LINKFLAGS=[ steamlib ])
	# Mostly GCC
	else:
		if OS_BIT == "64":
			if (use_64bit_lib):
				steamlib += "64"
				steamlib_path += "/win64"
		env.Append(LIBS=[ steamlib ])
	env.Append(LIBS=[ steamlib_path ])
	# Include tools
	if OS_BIT == "64":
		env.Append(LIBS=["godot.windows.opt.tools.64"])
	else:
		env.Append(LIBS=["godot.windows.opt.tools.32"])
# Append the godot core and Steam API
env.Append(LIBS=["godot_cpp_core", "godot_cpp_bindings", "steam_api"])

# Sources has all the paths to files that should be compiled
# I usually have one init.cpp at the top of the source tree : sources = ["init.cpp"]

sources = ["init.cpp","godotsteam.cpp"]

library = env.SharedLibrary(target=("../lib/" + project_name), source=sources)
Default(library)